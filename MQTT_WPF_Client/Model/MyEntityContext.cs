 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.Text;
using System.Threading.Tasks;

namespace MQTT_WPF_Client.Model 
{
    public partial class MyEntityContext : BrightstarEntityContext {
    	
    	static MyEntityContext() 
    	{
            InitializeEntityMappingStore();
        }
        
        /// <summary>
        /// Initialize the internal cache of entity attribute information.
        /// </summary>
        /// <remarks>
        /// This method is normally invoked from the static constructor for the generated context class.
        /// It is provided as a public static method to enable the use of the cached entity attribute 
        /// information without the need to construct a context (typically in test code). 
        /// In normal application code you should never need to explicitly call this method.
        /// </remarks>
        public static void InitializeEntityMappingStore()
        {
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(MQTT_WPF_Client.Model.IMultiSensor));
    		EntityMappingStore.Instance.SetImplMapping<MQTT_WPF_Client.Model.IMultiSensor, MQTT_WPF_Client.Model.MultiSensor>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(MQTT_WPF_Client.Model.ISensor));
    		EntityMappingStore.Instance.SetImplMapping<MQTT_WPF_Client.Model.ISensor, MQTT_WPF_Client.Model.Sensor>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(MQTT_WPF_Client.Model.ISensorData));
    		EntityMappingStore.Instance.SetImplMapping<MQTT_WPF_Client.Model.ISensorData, MQTT_WPF_Client.Model.SensorData>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public MyEntityContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public MyEntityContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		MultiSensors = 	new BrightstarEntitySet<MQTT_WPF_Client.Model.IMultiSensor>(this);
    		Sensors = 	new BrightstarEntitySet<MQTT_WPF_Client.Model.ISensor>(this);
    		SensorDatas = 	new BrightstarEntitySet<MQTT_WPF_Client.Model.ISensorData>(this);
    	}
    	
    	internal IEntitySet<MQTT_WPF_Client.Model.IMultiSensor> MultiSensors
    	{
    		get; private set;
    	}
    	
    	internal IEntitySet<MQTT_WPF_Client.Model.ISensor> Sensors
    	{
    		get; private set;
    	}
    	
    	internal IEntitySet<MQTT_WPF_Client.Model.ISensorData> SensorDatas
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(MQTT_WPF_Client.Model.IMultiSensor))) {
                return (IEntitySet<T>)this.MultiSensors;
            }
            if (typeof(T).Equals(typeof(MQTT_WPF_Client.Model.ISensor))) {
                return (IEntitySet<T>)this.Sensors;
            }
            if (typeof(T).Equals(typeof(MQTT_WPF_Client.Model.ISensorData))) {
                return (IEntitySet<T>)this.SensorDatas;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class MyEntityContext
        
}
namespace MQTT_WPF_Client.Model 
{
    
    internal partial class MultiSensor : BrightstarEntityObject, IMultiSensor 
    {
    	public MultiSensor(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public MultiSensor(BrightstarEntityContext context) : base(context, typeof(MultiSensor)) { }
    	public MultiSensor() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of MQTT_WPF_Client.Model.IMultiSensor
    
    	public System.String Location
    	{
            		get { return GetRelatedProperty<System.String>("Location"); }
            		set { SetRelatedProperty("Location", value); }
    	}
    
    	public System.String PublicName
    	{
            		get { return GetRelatedProperty<System.String>("PublicName"); }
            		set { SetRelatedProperty("PublicName", value); }
    	}
    	public System.Collections.Generic.ICollection<MQTT_WPF_Client.Model.ISensor> Sensors
    	{
    		get { return GetRelatedObjects<MQTT_WPF_Client.Model.ISensor>("Sensors"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Sensors", value); }
    								}
    	#endregion
    }
}
namespace MQTT_WPF_Client.Model 
{
    
    internal partial class Sensor : BrightstarEntityObject, ISensor 
    {
    	public Sensor(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Sensor(BrightstarEntityContext context) : base(context, typeof(Sensor)) { }
    	public Sensor() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of MQTT_WPF_Client.Model.ISensor
    
    	public System.String SensorType
    	{
            		get { return GetRelatedProperty<System.String>("SensorType"); }
            		set { SetRelatedProperty("SensorType", value); }
    	}
    
    	public System.String Unit
    	{
            		get { return GetRelatedProperty<System.String>("Unit"); }
            		set { SetRelatedProperty("Unit", value); }
    	}
    
    	public System.String LastValue
    	{
            		get { return GetRelatedProperty<System.String>("LastValue"); }
            		set { SetRelatedProperty("LastValue", value); }
    	}
    
    	public System.DateTime LastUpdated
    	{
            		get { return GetRelatedProperty<System.DateTime>("LastUpdated"); }
            		set { SetRelatedProperty("LastUpdated", value); }
    	}
    
    	public MQTT_WPF_Client.Model.IMultiSensor ParentMultiSensor
    	{
            get { return GetRelatedObject<MQTT_WPF_Client.Model.IMultiSensor>("ParentMultiSensor"); }
            set { SetRelatedObject<MQTT_WPF_Client.Model.IMultiSensor>("ParentMultiSensor", value); }
    	}
    	public System.Collections.Generic.ICollection<MQTT_WPF_Client.Model.ISensorData> SensorDatas
    	{
    		get { return GetRelatedObjects<MQTT_WPF_Client.Model.ISensorData>("SensorDatas"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SensorDatas", value); }
    								}
    	#endregion
    }
}
namespace MQTT_WPF_Client.Model 
{
    
    internal partial class SensorData : BrightstarEntityObject, ISensorData 
    {
    	public SensorData(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public SensorData(BrightstarEntityContext context) : base(context, typeof(SensorData)) { }
    	public SensorData() : base() { }
    	#region Implementation of MQTT_WPF_Client.Model.ISensorData
    
    	public System.DateTime ReceivedDt
    	{
            		get { return GetRelatedProperty<System.DateTime>("ReceivedDt"); }
            		set { SetRelatedProperty("ReceivedDt", value); }
    	}
    
    	public System.String Value
    	{
            		get { return GetRelatedProperty<System.String>("Value"); }
            		set { SetRelatedProperty("Value", value); }
    	}
    
    	public MQTT_WPF_Client.Model.ISensor ParentSensor
    	{
            get { return GetRelatedObject<MQTT_WPF_Client.Model.ISensor>("ParentSensor"); }
            set { SetRelatedObject<MQTT_WPF_Client.Model.ISensor>("ParentSensor", value); }
    	}
    	#endregion
    }
}
